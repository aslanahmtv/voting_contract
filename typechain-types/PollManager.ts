/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface PollManagerInterface extends Interface {
  getFunction(
    nameOrSignature: "createPoll" | "pollProposals" | "polls" | "vote"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "PollCreated" | "voted"): EventFragment;

  encodeFunctionData(
    functionFragment: "createPoll",
    values: [BytesLike, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "pollProposals",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "polls", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "createPoll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pollProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "polls", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
}

export namespace PollCreatedEvent {
  export type InputTuple = [result: BigNumberish];
  export type OutputTuple = [result: bigint];
  export interface OutputObject {
    result: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace votedEvent {
  export type InputTuple = [result: BigNumberish];
  export type OutputTuple = [result: bigint];
  export interface OutputObject {
    result: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PollManager extends BaseContract {
  connect(runner?: ContractRunner | null): PollManager;
  waitForDeployment(): Promise<this>;

  interface: PollManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createPoll: TypedContractMethod<
    [name: BytesLike, proposalNames: BytesLike[]],
    [void],
    "nonpayable"
  >;

  pollProposals: TypedContractMethod<
    [arg0: BytesLike, arg1: BytesLike],
    [[string, bigint] & { name: string; voteCount: bigint }],
    "view"
  >;

  polls: TypedContractMethod<
    [arg0: BigNumberish],
    [[string, bigint] & { name: string; proposalCount: bigint }],
    "view"
  >;

  vote: TypedContractMethod<
    [pollName: BytesLike, proposalName: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createPoll"
  ): TypedContractMethod<
    [name: BytesLike, proposalNames: BytesLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "pollProposals"
  ): TypedContractMethod<
    [arg0: BytesLike, arg1: BytesLike],
    [[string, bigint] & { name: string; voteCount: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "polls"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[string, bigint] & { name: string; proposalCount: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "vote"
  ): TypedContractMethod<
    [pollName: BytesLike, proposalName: BytesLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "PollCreated"
  ): TypedContractEvent<
    PollCreatedEvent.InputTuple,
    PollCreatedEvent.OutputTuple,
    PollCreatedEvent.OutputObject
  >;
  getEvent(
    key: "voted"
  ): TypedContractEvent<
    votedEvent.InputTuple,
    votedEvent.OutputTuple,
    votedEvent.OutputObject
  >;

  filters: {
    "PollCreated(uint256)": TypedContractEvent<
      PollCreatedEvent.InputTuple,
      PollCreatedEvent.OutputTuple,
      PollCreatedEvent.OutputObject
    >;
    PollCreated: TypedContractEvent<
      PollCreatedEvent.InputTuple,
      PollCreatedEvent.OutputTuple,
      PollCreatedEvent.OutputObject
    >;

    "voted(uint256)": TypedContractEvent<
      votedEvent.InputTuple,
      votedEvent.OutputTuple,
      votedEvent.OutputObject
    >;
    voted: TypedContractEvent<
      votedEvent.InputTuple,
      votedEvent.OutputTuple,
      votedEvent.OutputObject
    >;
  };
}
