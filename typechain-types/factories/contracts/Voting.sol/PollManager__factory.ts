/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  PollManager,
  PollManagerInterface,
} from "../../../contracts/Voting.sol/PollManager";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "enum PollManager.EventResult",
        name: "result",
        type: "uint8",
      },
    ],
    name: "PollCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "enum PollManager.EventResult",
        name: "result",
        type: "uint8",
      },
    ],
    name: "Voted",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "name",
        type: "bytes32",
      },
      {
        internalType: "bytes32[]",
        name: "proposalNames",
        type: "bytes32[]",
      },
    ],
    name: "createPoll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "pollProposals",
    outputs: [
      {
        internalType: "bytes32",
        name: "name",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "voteCount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "polls",
    outputs: [
      {
        internalType: "bytes32",
        name: "name",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "proposalCount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "pollName",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "proposalName",
        type: "bytes32",
      },
    ],
    name: "vote",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561000f575f80fd5b50335f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610081575f6040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016100789190610196565b60405180910390fd5b6100908161009660201b60201c565b506101af565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050815f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61018082610157565b9050919050565b61019081610176565b82525050565b5f6020820190506101a95f830184610187565b92915050565b610b07806101bc5f395ff3fe608060405234801561000f575f80fd5b506004361061007b575f3560e01c8063dcaf84d911610059578063dcaf84d9146100d8578063eeaaf19d146100f4578063f2fde38b14610110578063f66a1e701461012c5761007b565b8063715018a61461007f5780638da5cb5b14610089578063ac2f0074146100a7575b5f80fd5b61008761015d565b005b610091610170565b60405161009e91906105ef565b60405180910390f35b6100c160048036038101906100bc919061064c565b610197565b6040516100cf92919061069e565b60405180910390f35b6100f260048036038101906100ed919061083f565b6101c6565b005b61010e60048036038101906101099190610899565b61033f565b005b61012a60048036038101906101259190610901565b6103b2565b005b61014660048036038101906101419190610899565b610436565b60405161015492919061069e565b60405180910390f35b610165610461565b61016e5f6104e8565b565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600181815481106101a6575f80fd5b905f5260205f2090600202015f91509050805f0154908060010154905082565b6101ce610461565b5f60018054905014610215576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161020c90610986565b60405180910390fd5b600160405180604001604052808481526020018351815250908060018154018082558091505060019003905f5260205f2090600202015f909190919091505f820151815f01556020820151816001015550505f5b81518110156103035760405180604001604052808383815181106102905761028f6109a4565b5b602002602001015181526020015f81525060025f8581526020019081526020015f205f8484815181106102c6576102c56109a4565b5b602002602001015181526020019081526020015f205f820151815f01556020820151816001015590505080806102fb906109fe565b915050610269565b507fdd50f9e92bd92d932777994a155af7f5f24d3350e7eba40bd434365f1c14dd1a5f6040516103339190610ab8565b60405180910390a15050565b60025f8381526020019081526020015f205f8281526020019081526020015f206001015f815480929190610372906109fe565b91905055507f7093329465ed557bd14ccfc262717be13ddd1773b2a8307dd8560299717a87b35f6040516103a69190610ab8565b60405180910390a15050565b6103ba610461565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361042a575f6040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161042191906105ef565b60405180910390fd5b610433816104e8565b50565b6002602052815f5260405f20602052805f5260405f205f9150915050805f0154908060010154905082565b6104696105a9565b73ffffffffffffffffffffffffffffffffffffffff16610487610170565b73ffffffffffffffffffffffffffffffffffffffff16146104e6576104aa6105a9565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016104dd91906105ef565b60405180910390fd5b565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050815f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f33905090565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6105d9826105b0565b9050919050565b6105e9816105cf565b82525050565b5f6020820190506106025f8301846105e0565b92915050565b5f604051905090565b5f80fd5b5f80fd5b5f819050919050565b61062b81610619565b8114610635575f80fd5b50565b5f8135905061064681610622565b92915050565b5f6020828403121561066157610660610611565b5b5f61066e84828501610638565b91505092915050565b5f819050919050565b61068981610677565b82525050565b61069881610619565b82525050565b5f6040820190506106b15f830185610680565b6106be602083018461068f565b9392505050565b6106ce81610677565b81146106d8575f80fd5b50565b5f813590506106e9816106c5565b92915050565b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b610739826106f3565b810181811067ffffffffffffffff8211171561075857610757610703565b5b80604052505050565b5f61076a610608565b90506107768282610730565b919050565b5f67ffffffffffffffff82111561079557610794610703565b5b602082029050602081019050919050565b5f80fd5b5f6107bc6107b78461077b565b610761565b905080838252602082019050602084028301858111156107df576107de6107a6565b5b835b8181101561080857806107f488826106db565b8452602084019350506020810190506107e1565b5050509392505050565b5f82601f830112610826576108256106ef565b5b81356108368482602086016107aa565b91505092915050565b5f806040838503121561085557610854610611565b5b5f610862858286016106db565b925050602083013567ffffffffffffffff81111561088357610882610615565b5b61088f85828601610812565b9150509250929050565b5f80604083850312156108af576108ae610611565b5b5f6108bc858286016106db565b92505060206108cd858286016106db565b9150509250929050565b6108e0816105cf565b81146108ea575f80fd5b50565b5f813590506108fb816108d7565b92915050565b5f6020828403121561091657610915610611565b5b5f610923848285016108ed565b91505092915050565b5f82825260208201905092915050565b7f506f6c6c20616c726561647920657869737473000000000000000000000000005f82015250565b5f61097060138361092c565b915061097b8261093c565b602082019050919050565b5f6020820190508181035f83015261099d81610964565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f610a0882610619565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610a3a57610a396109d1565b5b600182019050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b60018110610a8357610a82610a45565b5b50565b5f819050610a9382610a72565b919050565b5f610aa282610a86565b9050919050565b610ab281610a98565b82525050565b5f602082019050610acb5f830184610aa9565b9291505056fea2646970667358221220c31e23c00efe51c7db37ed335a3cbdd86a755587656e12c7405880e030071e9864736f6c63430008140033";

type PollManagerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PollManagerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PollManager__factory extends ContractFactory {
  constructor(...args: PollManagerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      PollManager & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): PollManager__factory {
    return super.connect(runner) as PollManager__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PollManagerInterface {
    return new Interface(_abi) as PollManagerInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): PollManager {
    return new Contract(address, _abi, runner) as unknown as PollManager;
  }
}
